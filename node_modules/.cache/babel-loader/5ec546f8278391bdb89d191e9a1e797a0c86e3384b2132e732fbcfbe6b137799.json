{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProjetWeb\\\\Chouton-Timer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TimerSetup from './components/TimerSetup';\nimport TimerDisplay from './components/TimerDisplay';\nimport './styles/Timer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  console.log('App is rendering'); // Debug log\n\n  const [isRunning, setIsRunning] = useState(false);\n  const [timerConfig, setTimerConfig] = useState({\n    workDuration: 0,\n    breakDuration: 0,\n    totalTime: 0,\n    workSound: 'beep',\n    breakSound: 'ding'\n  });\n  const handleStart = config => {\n    setTimerConfig(config);\n    setIsRunning(true);\n  };\n  const handleReset = () => {\n    setIsRunning(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: !isRunning ? /*#__PURE__*/_jsxDEV(TimerSetup, {\n      onStart: handleStart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(TimerDisplay, {\n      config: timerConfig,\n      onReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PmvZRySrz2QD13QZm7xevtiRwsc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TimerSetup","TimerDisplay","jsxDEV","_jsxDEV","App","_s","console","log","isRunning","setIsRunning","timerConfig","setTimerConfig","workDuration","breakDuration","totalTime","workSound","breakSound","handleStart","config","handleReset","className","children","onStart","fileName","_jsxFileName","lineNumber","columnNumber","onReset","_c","$RefreshReg$"],"sources":["C:/ProjetWeb/Chouton-Timer/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport TimerSetup from './components/TimerSetup';\r\nimport TimerDisplay from './components/TimerDisplay';\r\nimport './styles/Timer.css';\r\n\r\nfunction App() {\r\n  console.log('App is rendering'); // Debug log\r\n\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [timerConfig, setTimerConfig] = useState({\r\n    workDuration: 0,\r\n    breakDuration: 0,\r\n    totalTime: 0,\r\n    workSound: 'beep',\r\n    breakSound: 'ding'\r\n  });\r\n\r\n  const handleStart = (config) => {\r\n    setTimerConfig(config);\r\n    setIsRunning(true);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setIsRunning(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {!isRunning ? (\r\n        <TimerSetup onStart={handleStart} />\r\n      ) : (\r\n        <TimerDisplay \r\n          config={timerConfig} \r\n          onReset={handleReset}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACbC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC;;EAEjC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC;IAC7Ca,YAAY,EAAE,CAAC;IACfC,aAAa,EAAE,CAAC;IAChBC,SAAS,EAAE,CAAC;IACZC,SAAS,EAAE,MAAM;IACjBC,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,MAAMC,WAAW,GAAIC,MAAM,IAAK;IAC9BP,cAAc,CAACO,MAAM,CAAC;IACtBT,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxBV,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,oBACEN,OAAA;IAAKiB,SAAS,EAAC,KAAK;IAAAC,QAAA,EACjB,CAACb,SAAS,gBACTL,OAAA,CAACH,UAAU;MAACsB,OAAO,EAAEL;IAAY;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEpCvB,OAAA,CAACF,YAAY;MACXiB,MAAM,EAAER,WAAY;MACpBiB,OAAO,EAAER;IAAY;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACrB,EAAA,CAjCQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAmCZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}